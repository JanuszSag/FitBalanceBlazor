@page "/allClientDiets"
@using System.ComponentModel.DataAnnotations 
@using ClassLibrary1
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@* @inject IDialogService DialogService *@

<PageTitle>All clients diets</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>wszystkie diety</strong></MudText>


<!-- Sekcja elementów listy diet -->
<MudGrid>
    <MudItem xs="9">
        <AuthorizeView Roles="Employee">
            <Authorized>
            <div align="center">
                <MudButton Variant="Variant.Filled"
                           Style="width:300px; background:rgb(255,152,107);border-radius: 20px;"
                           Href="/addDiet">
                    Dodaj dietę
                </MudButton>
            </div>
            </Authorized>
        </AuthorizeView>
        @foreach (var dieta in diety)
        {
            <MudPaper Class="pa-3 my-4" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
                <MudText Typo="Typo.h6" Style="text-transform: uppercase;"><strong>@dieta.nazwa</strong></MudText>
                <MudStack>
                    <MudText Typo="Typo.subtitle1">Opis: @dieta.opis</MudText>
                    <MudText Typo="Typo.subtitle1">Kaloryczność: @dieta.kalorycznosc</MudText>
                    <MudText Typo="Typo.subtitle1">Rodzaj: @rodzaje.FirstOrDefault(r => r.id_rodzaj == dieta.rodzaj)?.nazwa</MudText>

                    <MudText Typo="Typo.subtitle1" Class="d-inline">Dania:
                        @foreach (var danie in @dieta.Danie_id_danie)
                        {
                            @dieta.Danie_id_danie.FirstOrDefault(d => d.id_danie == danie.id_danie)?.nazwa.ToString().PadRight(60)
                        }
                    </MudText>
                </MudStack>

                <AuthorizeView Roles="Employee">
                    <Authorized>
                    <MudStack Row="true" Justify="Justify.SpaceAround">
                        <div class="d-flex align-center">
                            <MudButton Variant="Variant.Filled"
                                       Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-right: 100px"
                                       OnClick="() => onChangeDiet(dieta.id_dieta)">
                                Zmień
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-left: 100px"
                                       OnClick="() => DeleteDiet(dieta.id_dieta)">Usuń
                            </MudButton>
                        </div>
                    </MudStack>
                    </Authorized>
                </AuthorizeView>
            </MudPaper>

        }

    </MudItem>

    <!-- Sekcja filtrów-rodzaj diety -->
    <MudItem xs="2">
        <MudStack>
            <MudText Typo=Typo.h6><strong>Filtry</strong></MudText>
            <MudPaper Class="pa-10" Style="border: 6px black;border-radius: 20px;">
                <MudText Typo="Typo.h6">Rodzaj:</MudText>
                <MudRadioGroup @bind-Value="modelFilter.SelectedOption">
                    <MudStack>
                        <MudRadio Value="@("wszystkieDiety")">wszystkie rodzaje</MudRadio>
                        @foreach (var rodzaj in @rodzaje)
                        {
                            <MudRadio Value="@rodzaj.nazwa">@rodzaj.nazwa</MudRadio>
                        }
                    </MudStack>

                </MudRadioGroup>

                <div class="d-flex align-center">
                <MudButton ButtonType="ButtonType.Button"
                           Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;"
                           OnClick="dietsFilter">
                    Pokaż wyniki
                </MudButton>
                </div>


                    <MudText Typo="Typo.h6">Kaloryczność:</MudText>
                    <MudRadioGroup @bind-Value="modelFilter.SelectedKcal">
                        <MudStack>
                            <MudRadio Value="0">wszystkie kcal</MudRadio>
                            <MudRadio Value="1200">1200</MudRadio>
                            <MudRadio Value="1500">1500</MudRadio>
                            <MudRadio Value="1800">1800</MudRadio>
                            <MudRadio Value="2000">2000</MudRadio>
                            <MudRadio Value="2500">2500</MudRadio>
                            <MudRadio Value="3000">3000</MudRadio>
                        </MudStack>

                    </MudRadioGroup>

                    <div class="d-flex align-center">
                        <MudButton ButtonType="ButtonType.Button"
                                   Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;"
                                   OnClick="dietsFilterKcal">
                            Pokaż wyniki
                        </MudButton>
                    </div>
            </MudPaper>
        </MudStack>
    </MudItem>
</MudGrid>


@code {
    
    //Zmienne, które są listami obiektów typu Dieta i Rodzaj, lista przechowuje dane, które pobrane są z API
    private List<Dieta> diety=new List<Dieta>();
    private List<Rodzaj> rodzaje=new List<Rodzaj>();
    private List<Danie> dania=new List<Danie>();
    

    protected override async Task OnInitializedAsync()
    {
        var dietResponse = await Http.GetFromJsonAsync<ServiceResponse<List<Dieta>>>("api/Diet");
        diety = dietResponse.Data;
        rodzaje = await Http.GetFromJsonAsync<List<Rodzaj>>("api/Category");
        var MealResponse = await Http.GetFromJsonAsync<ServiceResponse<List<Danie>>>("api/Meal");
        dania = MealResponse.Data;

    }

    // Metoda do przekazywania ID diety do strony zmiany
    private void onChangeDiet(int id) 
    {
        NavigationManager.NavigateTo($"/changeDiet/{id}");
    }
    //Model formularza,Klasa "AllClientDiets" gdzie przechowywane są informację wprowadzone do formularza(filtracja)
    FilterForm modelFilter = new FilterForm();
    bool success;

    public class FilterForm
    {
        public string SelectedOption { get; set; }
        public int SelectedKcal { get; set; }

    }
       //obsługa filtrów
       private async Task dietsFilter()
       {
        
           var dietyResponse = await Http.GetFromJsonAsync<ServiceResponse<List<Dieta>>>("api/Diet");
           diety = dietyResponse.Data;
           if (!modelFilter.SelectedOption.Equals("wszystkieDiety"))
           {
               diety = diety.Where(d => rodzaje.Any(r => r.id_rodzaj == d.rodzaj && r.nazwa == modelFilter.SelectedOption)).ToList();
           }
           StateHasChanged();
       }
       private async Task dietsFilterKcal()
       {
           if (!modelFilter.SelectedKcal.Equals("wszystkieKcal"))
           {

               diety = await Http.GetFromJsonAsync<List<Dieta>>("api/Diet");
           }

           if (modelFilter.SelectedKcal > 0)
               {
                   // Filtrowanie dokładnie po wybranej kaloryczności
                   diety = diety.Where(d => d.kalorycznosc == modelFilter.SelectedKcal).ToList();
               }
           
           StateHasChanged();
       }
    //wyswietlanie snackbaru-krótkiej wiadomości o powodzeniu lub nie danej operacji
    private void snackBarFun(bool isSuccess)
    {
        if (isSuccess)
        {
            Snackbar.Add("Tutaj bedzie informacja o (nie)powodzeniu update na bazie danych",Severity.Success);
        }
        else
        {
            Snackbar.Add("Tutaj bedzie informacja o niepowodzeniu update na bazie danych",Severity.Error);
        }
    }
    //
    // private async Task ShowDialog()
    // {
    //     
    //     var parameters = new DialogParameters
    //     {
    //     };
    //
    //     var options = new DialogOptions
    //     {
    //         CloseButton = false,
    //         MaxWidth = MaxWidth.Small,
    //         FullWidth = true
    //     };
    //
    //     var dialog = DialogService.Show<AllClientDietsDialog>("Usunięcie diety", parameters, options);
    //     var result = await dialog.Result;
    //
    //     if (!result.Canceled) 
    //     {
    //         NavigationManager.NavigateTo("/AllClientDiets");
    //     }
    //}
    private async void DeleteDiet(int id)
    {
        var result = await Http.DeleteAsync($"api/Diet/{id}");
        
        StateHasChanged();
    }

}