@page "/"
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@using System.ComponentModel.DataAnnotations
@using System.Data
@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using ClassLibrary1
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
 
<PageTitle>Home</PageTitle>

<MudStack Spacing="5">

    <!--Sekcja początkowa strony -tytuł-->
    <div id="sectionStarter">
        <MudPaper Class="pa-10" Style="background:rgb(223,243,156);border-radius: 20px; margin-left: 30px; margin-right: 30px;height: 500px">

            <MudGrid AlignItems="center">
                <MudItem xs="6">
                    <MudStack Spacing="3">
                        <MudText Align="Align.Left" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>fit</strong></MudText>
                        <MudText Align="Align.Left" Typo="Typo.h2" Style="text-transform: uppercase;"><strong>balance</strong></MudText>
                        <MudText Align="Align.Left" Typo="Typo.h6">Zbalansowane diety dla zdrowego trybu życia</MudText>
                        <MudButton Variant="Variant.Filled" Style="width:300px; background:rgb(255,152,107);border-radius: 20px;"
                                   Href="/#sectionProgram">Wybierz swój program</MudButton><!--sciezka do sekcji na tej stronie -->
                    </MudStack>
                </MudItem>

                <MudItem xs="6">
                    <MudImage Src="/Images/HomePage/StarterDish.png" Alt="StarterDishImage" Class="rounded-lg" Height="650" />
                </MudItem>

            </MudGrid>

        </MudPaper>

    </div>
    <!--Sekcja o nas-->
    <div id="sectionAboutUs">
        <MudStack>
            <MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>o nas</strong></MudText>
            <MudText Align="Align.Center" Typo="Typo.h5" Style="margin-left: 30px; margin-right: 30px;"> @((MarkupString)textAboutus.Replace(Environment.NewLine, "<br/>")) </MudText>
            <MudStack Row="true" Spacing="2" Justify="Justify.SpaceAround" Style="margin-left: 30px; margin-right: 30px;">

                <MudPaper Class="pa-15" Style="background:rgb(223,243,156);border-radius: 20px;">
                    <MudImage Src="/Images/HomePage/AboutUsDiet.png" Alt="DietImage" Class="rounded-lg"/>
                    <MudText Align="Align.Center" Typo="Typo.h5"> Mamy duzy wybor zbalansowanych zdrowych diet</MudText>
                </MudPaper>

                <MudPaper Class="pa-15" Style="background:rgb(223,243,156);border-radius: 20px;">
                    <MudImage Src="/Images/HomePage/AboutUsDietician.png" Alt="DieticianImage" Class="rounded-lg"/>
                    <MudText Align="Align.Center" Typo="Typo.h5"> Nasi dietetycy to wysoko kwalifikowane specialiści</MudText>
                </MudPaper>

                <MudPaper Class="pa-15" Style="background:rgb(223,243,156);border-radius: 20px;">
                    <MudImage Src="/Images/HomePage/AboutUsDevelop.png" Alt="DevelopImage"  Class="rounded-lg"/>
                    <MudText Align="Align.Center" Typo="Typo.h5"> Już ponad 100 naszych klientów zmieniło swoje życie</MudText>
                </MudPaper>

            </MudStack>
        </MudStack>
    </div>

    <!--Sekcja usług-->
    <div id="sectionServices">
        <MudStack>
            <MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>usługi</strong></MudText>

            <MudGrid>
                <MudItem xs="3" Class="d-flex flex-column" Style="border: 5px solid rgb(123,195,218);border-radius: 20px;margin-left: 30px; margin-right: 30px;">
                    <MudText Align="Align.Left" Typo="Typo.h5" >@textServices </MudText>
                    <div class="d-flex align-center">
                        <MudButton Variant="Variant.Filled"  Style="width:160px; background:rgb(255,152,107);border-radius: 20px;"
                                   Href="/login">Zaloguj się
                        </MudButton>
                    </div>
                </MudItem>

                <MudItem xs="8">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudPaper Class="d-flex align-center justify-center" Style="border: 5px solid rgb(123,195,218);border-radius: 20px;height: 44vh">
                                <MudImage Fluid="true" Src="/Images/HomePage/ServicesMyDietv2.png" Alt="MyDietImage"  Class="rounded-lg"/>
                            </MudPaper>
                        </MudItem>

                        <MudItem xs="6">
                            <MudPaper Class="d-flex align-center justify-center" Style="border: 5px solid rgb(123,195,218);border-radius: 20px;">
                                <MudImage Fluid="true" Src="/Images/HomePage/ServicesCountKcal.png" Alt="KcalImage"  Class="rounded-lg"/>
                            </MudPaper>
                        </MudItem>
                        
                        <MudItem xs="6">
                            <MudPaper Class="d-flex align-center justify-center" Style="border: 5px solid rgb(123,195,218);border-radius: 20px; height: 44vh">
                                <MudImage Fluid="true" Src="/Images/HomePage/Reports.png" Alt="ReportImage"  Class="rounded-lg"/>
                            </MudPaper>
                        </MudItem>
                        
                        <MudItem xs="6">
                            <MudPaper Class="d-flex align-center justify-center" Style="border: 5px solid rgb(123,195,218);border-radius: 20px; height: 44vh">
                                <MudImage Fluid="true" Src="/Images/HomePage/ServicesWaterv2.png" Alt="WaterImage"  Class="rounded-lg" />
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>

        </MudStack>
    </div>

    <!--Sekcja wyboru programu-->
    <div id="sectionProgram">
        <MudStack>
            <MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>Programy</strong></MudText>
            <MudStack Spacing="3" Justify="Justify.SpaceAround">

                <MudPaper Class="pa-20" Style="background:rgb(223,243,156);border-radius: 20px;margin-left: 30px; margin-right: 30px;">
                    <MudText Align="Align.Left" Typo="Typo.h4"><strong> Utrata wagi</strong></MudText>
                    <MudText Align="Align.Left" Typo="Typo.h5" >@textProgram </MudText>
                    <MudButton Variant="Variant.Filled" Style="width:150px; background:rgb(255,152,107);border-radius: 20px;"
                               Href="/programLoseWeight">Zobacz
                    </MudButton>
                </MudPaper>

                <MudPaper Class="pa-20" Style="background:rgb(223,243,156);border-radius: 20px;margin-left: 30px; margin-right: 30px;">
                    <MudText Align="Align.Left" Typo="Typo.h4"><strong>Urzymanie wagi</strong></MudText>
                    <MudText Align="Align.Left" Typo="Typo.h5" >@textProgram </MudText>
                    <MudButton Variant="Variant.Filled" Style="width:150px; background:rgb(255,152,107);border-radius: 20px;"
                               Href="/programKeepWeight">Zobacz
                    </MudButton>
                </MudPaper>

                <MudPaper Class="pa-20" Style="background:rgb(223,243,156);border-radius: 20px;margin-left: 30px; margin-right: 30px;">
                    <MudText Align="Align.Left" Typo="Typo.h4"><strong>Zwiększenie wagi</strong></MudText>
                    <MudText Align="Align.Left" Typo="Typo.h5" >@textProgram </MudText>
                    <MudButton Variant="Variant.Filled" Style="width:150px; background:rgb(255,152,107);border-radius: 20px;"
                               Href="/programForUnderweight">Zobacz
                    </MudButton>
                </MudPaper>

            </MudStack>
        </MudStack>
    </div>

    <!--Sekcja możliwości zobaczenia diet-->
    <div id="sectionDiets">
        <MudStack >
            <MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>nasze diety</strong></MudText>
        </MudStack>

        <MudGrid>

            <!-- Sekcja opisu -->
            <MudItem xs="3">
                <MudCard Style=" position: relative;">
                    <MudPaper Class="pa-2" Style="border: 2px solid black;border-radius: 10px;">
                        <MudText > @((MarkupString)textOurDiets.Replace(Environment.NewLine, "<br/>")) </MudText>
                    </MudPaper>
                </MudCard>
            </MudItem>

            <MudItem xs="8"> <!-- xs="liczba" oznacza ilośc kolum, zajmowanych przez element xs=12 cala szerokosc, 6 pol ...-->
                <MudStack Spacing="3">
                    <!-- Sekcja z przekierowaniem do strony z listą dla gości -->
                    <MudPaper Class="pa-3" Style="background:rgb(223,243,156);border-radius: 20px;">
                        <MudText Align="Align.Left" Typo="Typo.h4"><strong> Lista diet dla gości</strong></MudText>
                        <div class="d-flex align-center">
                            <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;"
                                       Href="/allGuestDiets">Zobacz</MudButton>
                        </div>
                    </MudPaper>

                    <!-- Sekcja wyboru dania do zmieny -->
                    <MudPaper Class="pa-3" Style="background:rgb(223,243,156);border-radius: 20px;">
                        <MudText Align="Align.Left" Typo="Typo.h4"><strong> Lista diet tylko dla zalogowanych użytkowników</strong></MudText>
                        <AuthorizeView>
                            <Authorized>
                                <div class="d-flex align-center">
                                    <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;"
                                               Href="/AllClientDiets">Zobacz</MudButton>
                                </div>
                            </Authorized>
                            <NotAuthorized>
                                <div class="d-flex align-center">
                                    <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;"
                                               Href="/login">Zaloguj się</MudButton>
                                </div>
                            </NotAuthorized>
                        </AuthorizeView>
                    </MudPaper>
                </MudStack>
            </MudItem>
        </MudGrid>
    </div>

    <!--Sekcja opinii-->
    <div id="sectionOpinions">
        <MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>opinie</strong></MudText>
        <MudStack>
            @foreach (var opinia in opinie)
            {
                <MudPaper Class="pa-10 my-4" Style="background:rgb(223,243,156);border-radius: 25px;margin-left: 30px; margin-right: 30px;">
                    <MudText Align="Align.Left" Typo="Typo.h5">Autor: @uzytkownicy.FirstOrDefault(u=>u.id_uzytkownik==opinia.id_uzytkownik)?.pseudonim</MudText> 
                    <MudRating ReadOnly="true" SelectedValue="@opinia.ocena.Value" Size="Size.Medium"/>
                    <MudText Align="Align.Left" Typo="Typo.h5">Opis: @opinia.zawartosc</MudText>
                </MudPaper>
            }
        
            <AuthorizeView>
                <Authorized>
                    @* <MudPaper Class="pa-2" Style="border: 2px solid black;border-radius: 10px;"> *@
                    <MudPaper Class="pa-10 my-4" Style="border: 5px solid rgb(223,243,156);border-radius: 10px;margin-left: 30px; margin-right: 30px;">
                        <MudText Align="Align.Left" Typo="Typo.h5"><strong>Oceń sam!</strong></MudText>
                        <MudRating SelectedValue="@rate" SelectedValueChanged="@AddRate"></MudRating>
                        <MudTextField @bind-Value="ContentText" Label="Należy wprowadzić zawartość" Variant="Variant.Text"></MudTextField>
                        <MudButton Button OnClick="() => AddReview(maxId, rate, ContentText, userId)"
                                   Variant="Variant.Filled" Class="mt-3" Style="width: 300px;background:rgb(255,152,107);border-radius: 20px;">
                            Zatwierdź
                        </MudButton>
                    </MudPaper>
                </Authorized>
            </AuthorizeView>
        </MudStack>
    </div>
    

    <!--Sekcja Q&A-->
    <div id="sectionQ&A">
        <MudStack>
            <MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>Q&A</strong></MudText>
        </MudStack>
        <MudStack>
            <MudPaper Class="pa-10" Style="background:rgb(223,243,156);border-radius: 20px;margin-left: 30px; margin-right: 30px;">
                <MudText Align="Align.Left" Typo="Typo.h6" Style="text-transform: uppercase;"><strong>Najczęstsze pytania</strong></MudText>

                <MudStack Spacing="3">

                    @foreach (var pytaniaOdpowiedzi in pytaniaIodpowiedzi)
                    {
                        <MudPaper Class="pa-10" Style="background:white;border-radius: 20px;">
                            <MudText Align="Align.Left" Typo="Typo.h5">@pytaniaOdpowiedzi.id . @pytaniaOdpowiedzi.pytanie </MudText>
                            <MudText Align="Align.Left" Typo="Typo.h5">@pytaniaOdpowiedzi.odpowiedz </MudText>
                        </MudPaper>
                    }
                </MudStack>

            </MudPaper>

        </MudStack>
    </div>
    <div id="sectionContact">
                <MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>napisz do nas</strong></MudText>
                <MudText Align="Align.Center" Typo="Typo.h5"> @((MarkupString)textSendEmail.Replace(Environment.NewLine, "<br/>")) </MudText>
                <MudText Align="Align.Center" Typo="Typo.h5">Nasz adres email:<strong> FitBalance@mail.com</strong></MudText>
    </div>

</MudStack>

@code
{
    private Uzytkownik user { get; set; }
    private JwtSecurityToken jwt { get; set; }
    private int userId { get; set; }


    string textAboutus = $"Cieszymy się, że jesteś z nami!{Environment.NewLine}FitBalance to portal dietetyczny dla każdego. Z nami zrzucisz zbędne kilogramy, dorzucisz brakujące kilogramy albo utrzymasz wagę w zdrowy sposób. Zależy nam na twoim zdrowiu i dobrym samopoczuciu dlatego nasi specjaliści przygotowali wiele zbilansowanych diet od wegańskich opcji przez keto aż po bezglutenowych, które możesz modyfikować. Nie tylko znajdziesz dietę dla siebie, a również lepiej zaplanujesz swoja przygodę ze zdrowiem za pomocą kalkulatora zapotrzebowania kalorycznego oraz miarki wypitej wody. Jesteśmy chętni się dla Ciebie udoskonalać dlatego masz możliwość wystawiania opinii na temat diet.\nMotywacją do stworzenia naszej aplikacji jest brak na rynku narzędzia, które by skutecznie\u00a0 łączył ze sobą aspekty planowania posiłków, monitorowania kaloryczności oraz ilości wody wypitej danego dnia.";
string textServices = "Dla naszych użytkowników oferujemy spersonalizowany program dietetyczny, który jest tworzony na podstawie indywidualnych preferencji i zapytań użytkownika. \n\nDodatkowo zalogowany użytkownik ma możliwość rejestrowania ilości spożywanej w ciągu dnia wody, wyliczania swojego zapotrzebowania kalorycznego oraz przeglądania rankingu najlepszych diet.";
string textProgram = "Mamy duży wybór zbalansowanych i zdrowych diet";
string textOurDiets = $"Nasze diety są opracowywane przez najlepszych dietetyków, aby spełniać indywidualne potrzeby naszych klientów.{Environment.NewLine} Dzięki profesjonalnemu podejściu i starannie dobranym składnikom, nasze plany żywieniowe pomagają osiągnąć zamierzone cele zdrowotne i sylwetkowe";
string textSendEmail = $"Zanim zadasz pytanie sprawdź Q&A. Może jest tam rozwiązanie Twojego problemu.{Environment.NewLine}Jeśli nadal nie znasz odpowiedzi - napisz do nas! Chętnie pomożemy Ci w rozwiązaniu problemów i wyjaśnimy wszelkie wątpliwości :)";

//opinie
    private List<Opinia> opinie=new List<Opinia>();
    private List<Uzytkownik> uzytkownicy=new List<Uzytkownik>();
    private List<Pytania_i_odpowiedzi> pytaniaIodpowiedzi = new List<Pytania_i_odpowiedzi>();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var TokenText = await LocalStorage.GetItemAsStringAsync("authToken");
            jwt = new JwtSecurityTokenHandler().ReadJwtToken(TokenText);
            var claim = jwt.Claims.First(c => c.Type.Equals("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"));
            var userResponse = await Http.GetFromJsonAsync<ServiceResponse<Uzytkownik>>($"api/user/{claim.Value}");
            user = userResponse.Data;
            userId = user.id_uzytkownik;
            
            var test = await Http.GetFromJsonAsync<ServiceResponse<List<Opinia>>>("api/Review");
            opinie = test.Data;
            var test2 = await Http.GetFromJsonAsync<ServiceResponse<List<Uzytkownik>>>("api/user");
            uzytkownicy = test2.Data;
            var test3 = await Http.GetFromJsonAsync<ServiceResponse<List<Pytania_i_odpowiedzi>>>("api/QuestionAnswer");
            pytaniaIodpowiedzi = test3.Data;
        }
        catch (Exception ex)
        {
            
        }
    }

    public string ContentText { get; set; }
    private OpiniaDTO newReview;
    int maxId { get; set; }
    private int rate = 0;

    private void AddRate(int newRate)
    {
        rate = newRate;
    }

    private async Task AddReview(int id_opinia, int ocena,string? zawartosc,int id_uzytkownik)
    {
        if (zawartosc is null)
        {
            Snackbar.Add("Należy uzupełnić poole \"zawartość\"");
            return;
        }

        try
        {
            newReview = new OpiniaDTO
            {
                id_opinia=id_opinia,
                ocena=ocena, 
                zawartosc = zawartosc, 
                data = DateOnly.FromDateTime(DateTime.Now),
                id_uzytkownik = id_uzytkownik,
                id_dieta = 1
            };
            var response = await Http.PostAsJsonAsync("api/Review", newReview);
            var test = await Http.GetFromJsonAsync<ServiceResponse<List<Opinia>>>("api/Review");
            opinie = test.Data;
            StateHasChanged();
            Snackbar.Add("Dodano opinię", Severity.Success);
            NavigationManager.NavigateTo("/#sectionOpinions");
        }
        catch(Exception e)
        {
            Snackbar.Add("Nie udało się dodać opini, spróbuj ponownie.",Severity.Error);
        }
    }


}