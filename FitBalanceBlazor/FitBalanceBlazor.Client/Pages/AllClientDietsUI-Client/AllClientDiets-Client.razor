@page "/allClientDiets-Client"
@using ClassLibrary1
using System.Net;
using FitBalanceBlazor;
using Microsoft.AspNetCore.Components.Web;
using MudBlazor;
using System.ComponentModel.DataAnnotations
using FitBalanceBlazor.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>All clients diets</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>wszystkie diety</strong></MudText>

<!-- Sekcja elementów listy diet -->
<MudGrid>
    <MudItem xs="9">
        @foreach (var dieta in diety) //dla kazdej diety wyswietlamy opis,rodzaj,dania
        {
            <MudPaper Class="pa-3 my-4" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
                <MudText Typo="Typo.h6" Style="text-transform: uppercase;"><strong>@dieta.nazwa</strong></MudText>
                <MudStack>
                    <MudText Typo="Typo.body1"><strong>opis:</strong> @dieta.opis</MudText>
                    <MudText Typo="Typo.body1"><strong>rodzaj:</strong> @rodzaje.FirstOrDefault(r => r.id_rodzaj == dieta.rodzaj)?.nazwa</MudText>
                    <MudText Typo="Typo.body1"><strong>dania:</strong> @string.Join(", ", dieta.Danie_id_danie.Select(d => d.nazwa))</MudText>
                </MudStack>
            </MudPaper>
        }
    </MudItem>

    <!-- Sekcja filtrowania -->
    <MudItem xs="3">
        <MudStack>
            <MudText Typo="Typo.h6"><strong>Filtry</strong></MudText>
            <MudPaper Class="pa-10" Style="border: 6px black;border-radius: 20px;">
                <MudText Typo="Typo.h6">Rodzaj:</MudText>
                <MudRadioGroup @bind-Value="modelFilter.SelectedOption">
                    <MudStack>
                        <MudRadio Value=@("wszystkieDiety")>wszystkie rodzaje</MudRadio>
                        @foreach (var rodzaj in rodzaje)
                        {
                            <MudRadio Value="@rodzaj.nazwa">@rodzaj.nazwa</MudRadio>
                        }
                    </MudStack>
                </MudRadioGroup>

                <div class="d-flex align-center mt-3">
                    <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;" OnClick="FilterDiets">
                        Pokaż wyniki
                    </MudButton>
                </div>
            </MudPaper>
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    
    private List<Dieta> diety;
    private List<Rodzaj> rodzaje;
    private List<Danie> dania;

    protected override async Task OnInitializedAsync()
    {
        // Pobieranie danych
        var DietBufor = await Http.GetFromJsonAsync<ServiceResponse<List<Dieta>>>("api/Diet");
        diety = DietBufor.Data;
        var RodzajBufor = await Http.GetFromJsonAsync<ServiceResponse<List<Rodzaj>>>("api/Category"); //TODO: ogarnąć ServiceReponse w rodzaju i diecie
        rodzaje = RodzajBufor.Data;
        var DaniaBufor = await Http.GetFromJsonAsync<ServiceResponse<List<Danie>>>("api/Meal");
        dania = DaniaBufor.Data;

        // Polaczenie dania z dieta
        foreach (var dieta in diety)
        {
            dieta.Danie_id_danie = dania.Where(d => dieta.Danie_id_danie.Select(m => m.id_danie).Contains(d.id_danie)).ToList();
        }
    }

    // Filtrowanie
    private FilterForm modelFilter = new FilterForm();
    public class FilterForm
    {
        public string SelectedOption { get; set; }
    }

    // Filtrowanie
    private async Task FilterDiets()
    {
        if (modelFilter.SelectedOption == "wszystkieDiety" || string.IsNullOrWhiteSpace(modelFilter.SelectedOption))
        {
            var buffor = await Http.GetFromJsonAsync<ServiceResponse<List<Dieta>>>("api/Diet");
            diety = buffor.Data;
        }
        else
        {
            diety = diety.Where(d => rodzaje.FirstOrDefault(r => r.id_rodzaj == d.rodzaj)?.nazwa == modelFilter.SelectedOption).ToList();
        }

        StateHasChanged();
    }
}