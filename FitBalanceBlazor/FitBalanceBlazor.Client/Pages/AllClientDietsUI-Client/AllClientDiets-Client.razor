@page "/allClientDiets-Client"
using System.Net;
using FitBalanceBlazor;
using Microsoft.AspNetCore.Components.Web;
using MudBlazor;
using System.ComponentModel.DataAnnotations
using FitBalanceBlazor.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>All clients diets</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>wszystkie diety</strong></MudText>

<!-- Sekcja elementów listy diet -->
<MudGrid>
    <MudItem xs="9">
        <MudTable Items="@diety">
            <RowTemplate>
                <MudPaper Class="pa-3 my-4" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
                    <MudTd Style="text-transform: uppercase" DataLabel="Nazwa"><strong>@context.nazwa</strong></MudTd>

                    <MudGrid>
                        <MudItem xs="4">
                            <MudText Typo="Typo.subtitle1"><strong>Śniadanie</strong></MudText>
                            <!--   <MudText Typo="Typo.body1">Danie: @(GetMealName(context.sniadanie))</MudText> -->
                           </MudItem>
                           <MudItem xs="4">
                               <MudText Typo="Typo.subtitle1"><strong>Obiad</strong></MudText>
                             <!--  <MudText Typo="Typo.body1">Danie: @(GetMealName(context.obiad))</MudText> -->
                           </MudItem>
                           <MudItem xs="4">
                               <MudText Typo="Typo.subtitle1"><strong>Kolacja</strong></MudText>
                            <!--   <MudText Typo="Typo.body1">Danie: @(GetMealName(context.kolacja))</MudText> -->
                           </MudItem>
                       </MudGrid>
                   </MudPaper>
               </RowTemplate>
           </MudTable>
       </MudItem>
   
       <!-- Sekcja filtrów-rodzaj diety i ilosci dan -->
    <MudItem xs="2">
        <MudStack>
            <MudText Typo="Typo.h6"><strong>Filtry</strong></MudText>
            <MudPaper Class="pa-10" Style="border: 6px black;border-radius: 20px;">
                <MudText Typo="Typo.h6">Rodzaj:</MudText>
                <MudRadioGroup @bind-Value="modelFilter.SelectedOption">
                    <MudStack>
                        <MudRadio Value=@("wszystkieDiety")>Wszystkie rodzaje</MudRadio>
                        @foreach (var rodzaj in rodzaje)
                        {
                            <MudRadio Value="@rodzaj.nazwa">@rodzaj.nazwa</MudRadio>
                        }
                    </MudStack>
                </MudRadioGroup>

                <MudText Typo="Typo.h6">Ilość posiłków:</MudText>
                <MudRadioGroup @bind-Value="modelFilter.MealsCount">
                    <MudStack>
                        <MudRadio Value="3">3</MudRadio>
                        <MudRadio Value="5">5</MudRadio>
                    </MudStack>
                </MudRadioGroup>

                <div class="d-flex align-center">
                    <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;" OnClick="FilterDiets">
                        Pokaż wyniki
                    </MudButton>
                </div>
            </MudPaper>
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    //Zmienne, które są listami obiektов Dieta, Rodzaj, Danie
    private List<Dieta> diety;
    private List<Rodzaj> rodzaje;
    private List<Danie> dania;

    protected override async Task OnInitializedAsync()
    {
        diety = await Http.GetFromJsonAsync<List<Dieta>>("api/Diet");
        rodzaje = await Http.GetFromJsonAsync<List<Rodzaj>>("api/Category");
        dania = await Http.GetFromJsonAsync<List<Danie>>("api/Meal");
    }

    //
    private string GetMealName(int? mealId)
    {
        return dania?.FirstOrDefault(d => d.id_danie == mealId)?.nazwa ?? "Brak";
    }

    // 
    private FilterForm modelFilter = new FilterForm();
    public class FilterForm
    {
        public string SelectedOption { get; set; }
        public int MealsCount { get; set; } = 3;
    }

    // 
    private async Task FilterDiets()
    {
        if (!string.IsNullOrWhiteSpace(modelFilter.SelectedOption))
        {
            diety = diety?.Where(d => rodzaje.Any(r => r.id_rodzaj == d.rodzaj && r.nazwa == modelFilter.SelectedOption)).ToList();
        }

        if (modelFilter.MealsCount > 0)
        {
          <!--  diety = diety?.Where(d => d.meals?.Count == modelFilter.MealsCount).ToList(); -->
        }

        StateHasChanged();
    } 
}
