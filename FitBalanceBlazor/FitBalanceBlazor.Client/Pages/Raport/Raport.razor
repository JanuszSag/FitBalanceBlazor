@page "/raport"
@using System.Net
@using System.Net.Http.Json
@using MudBlazor
@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject HttpClient Http

<MudGrid Class="pa-4">
    <!-- Lewa sekcja waga -->
    <MudItem xs="6">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-4">
            Miesięczny raport zmiany wagi
        </MudText>

        @if (Weights != null)
        {
            <MudTable Items="Weights" Elevation="2">
                <HeaderContent>
                    <MudTh>Data pomiaru</MudTh>
                    <MudTh>Waga</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Date.ToShortDateString()</MudTd>
                    <MudTd>@context.Weight kg</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudProgressCircular Indeterminate="true" Class="m-auto" />
        }
    </MudItem>

    <!-- Prawa sekcja - woda -->
    <MudItem xs="6">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-4">
            Miesięczny raport wypitej wody
        </MudText>

        @if (WaterLogs != null)
        {
            <MudTable Items="WaterLogs" Elevation="2">
                <HeaderContent>
                    <MudTh>Data</MudTh>
                    <MudTh>Ilość (ml)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Date.ToShortDateString()</MudTd>
                    <MudTd>@context.Amount</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudProgressCircular Indeterminate="true" Class="m-auto" />
        }
    </MudItem>
</MudGrid>

@code {
    private List<UserWeight> Weights;
    private List<WaterLog> WaterLogs;

    private JwtSecurityToken jwt { get; set; }
    private string UserIdFromToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var TokenText = await LocalStorage.GetItemAsStringAsync("authToken");
            jwt = new JwtSecurityTokenHandler().ReadJwtToken(TokenText);

            var claim = jwt.Claims.FirstOrDefault(c => c.Type.Equals("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"));
            UserIdFromToken = claim?.Value;

            if (!string.IsNullOrEmpty(UserIdFromToken))
            {
                // pobieranie danych o wadze
                var weightResponse = await Http.GetFromJsonAsync<WeightResponse>($"api/Report/Weight/{UserIdFromToken}");
                if (weightResponse?.Data != null)
                {
                    Weights = weightResponse.Data.Select(w => new UserWeight
                    {
                        Date = DateTime.Parse(w.data),
                        Weight = w.waga
                    }).ToList();
                }

                // pobieranie danych o wadze
                var waterResponse = await Http.GetFromJsonAsync<WaterResponse>($"api/Report/Water/{UserIdFromToken}");
                if (waterResponse?.Data != null)
                {
                    WaterLogs = waterResponse.Data.Select(w => new WaterLog
                    {
                        Date = DateTime.Parse(w.data),
                        Amount = w.ilosc
                    }).ToList();
                }
            }
            else
            {
                Console.WriteLine("Nie udało się pobrać ID użytkownika z tokena.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania danych: {ex.Message}");
        }
    }

    private class WeightResponse
    {
        public List<ApiWeight> Data { get; set; }
        public bool Success { get; set; }
        public string Message { get; set; }
    }

    private class ApiWeight
    {
        public string data { get; set; }
        public double waga { get; set; }
    }

    private class UserWeight
    {
        public DateTime Date { get; set; }
        public double Weight { get; set; }
    }

    private class WaterResponse
    {
        public List<ApiWater> Data { get; set; }
        public bool Success { get; set; }
        public string Message { get; set; }
    }

    private class ApiWater
    {
        public string data { get; set; }
        public int ilosc { get; set; } 
    }

    private class WaterLog
    {
        public DateTime Date { get; set; }
        public int Amount { get; set; }
    }
}
