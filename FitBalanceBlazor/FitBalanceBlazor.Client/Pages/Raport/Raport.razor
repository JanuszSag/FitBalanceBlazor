@page "/raport"
@using System.IdentityModel.Tokens.Jwt
@using System.Net
@using System.Net.Http.Json
@using Blazored.LocalStorage
@using ClassLibrary1
@using MudBlazor

@inject ILocalStorageService LocalStorage
@inject HttpClient Http


<MudGrid Class="pa-4">
    <!-- Lewa sekcja waga -->
    <MudItem xs="6">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-4">
            Miesięczny raport zmiany wagi
        </MudText>

        @if (Weights != null)
        {
            <MudTable Items="Weights" Elevation="2">
                <HeaderContent>
                    <MudTh>Data pomiaru</MudTh>
                    <MudTh>Waga</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.data.Value.ToShortDateString()</MudTd>
                    <MudTd>@context.waga kg</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudProgressCircular Indeterminate="true" Class="m-auto" />
        }
    </MudItem>

    <!-- Prawa sekcja - woda -->
    <MudItem xs="6">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-4">
            Miesięczny raport wypitej wody
        </MudText>

        @if (WaterLogs != null)
        {
            <MudTable Items="WaterLogs" Elevation="2">
                <HeaderContent>
                    <MudTh>Data</MudTh>
                    <MudTh>Ilość (ml)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.data.Value.ToShortDateString()</MudTd>
                    <MudTd>@context.ilosc</MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudProgressCircular Indeterminate="true" Class="m-auto" />
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter] public int UserId { get; set; } = 2;

    private List<Pomiar_wagi> Weights;
    private List<Wypita_woda> WaterLogs;
    private Uzytkownik user { get; set; }
    private JwtSecurityToken jwt { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Pobieranie danych z API
            var TokenText = await LocalStorage.GetItemAsStringAsync("authToken");
            jwt = new JwtSecurityTokenHandler().ReadJwtToken(TokenText);
            var claim = jwt.Claims.First(c => c.Type.Equals("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"));
            var userResponse = await Http.GetFromJsonAsync<ServiceResponse<Uzytkownik>>($"api/user/diet/{claim.Value}"); //zmienić na claim.id
            user = userResponse.Data;

            var RaportResponse = await Http.GetFromJsonAsync<ServiceResponse<List<Pomiar_wagi>>>($"api/Report/Weight/{user.id_uzytkownik}");
            Weights = RaportResponse.Data;

            var WaterResponse = await Http.GetFromJsonAsync<ServiceResponse<List<Wypita_woda>>>($"api/Report/Water/{user.id_uzytkownik}");
            WaterLogs = WaterResponse.Data;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas ładowania danych: {ex.Message}");
        }
    }
    
}
