@page "/changeDiet/changeIngredientsInDiet"
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using FitBalanceBlazor.Models
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Change ingredients in diet</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>zmiana diety</strong></MudText>

<MudGrid>
    <MudItem xs="6">
        <MudStack Spacing="3">
            <!-- Sekcja wyswietlenia wczesniej wybranych opcji-->
            <MudPaper Class="pa-3" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
                <MudText Typo="Typo.h6">Dieta do zmiany: @selectedDiet?.nazwa</MudText>
                 <MudText Typo="Typo.h6">Danie do zmiany: @SelectedOption</MudText> 
            </MudPaper>

            <!-- Sekcja wyboru składników-->
            <MudPaper Class="pa-3" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
                <MudText Typo="Typo.h6">Na jakie danie chcesz zmienić?</MudText>
                @* <MudText Typo="Typo.subtitle1" Class="mud-width-full">@(selectedProdukt == null ? "Nic nie wybrano" : $"Składnik: {selectedProdukt.nazwa}")</MudText> *@

                <MudText Typo="Typo.subtitle1" Class="mud-width-full">@(selectedMeal== null ? "Nic nie wybrano" : $"Wybrane danie: {selectedMeal.nazwa}")</MudText>
                
                <MudSelect @bind-Value="selectedMeal" Label="Wybierz danie"> @* AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable*@
                    <MudStack>
                        @foreach (var danie in dania)
                        {
                        <MudSelectItem Value="danie">@danie.nazwa</MudSelectItem>
                        }
                    </MudStack>
                </MudSelect>
                @* <MudSelect @bind-Value="selectedProdukt" Label="Wybierz składnik"> $1$ AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable#1# *@
                @*     <MudStack> *@
                @*         @foreach (var produkt in produkty) *@
                @*         { *@
                @*             <MudSelectItem Value="produkt">@produkt.nazwa</MudSelectItem> *@
                @*             <!--produkt_danie- tabela musi byc updatowana--> *@
                @*         } *@
                @*     </MudStack> *@
                @* </MudSelect> *@
                <div class="d-flex align-center">
                    <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;"
                               OnClick="snackBarFun">Zatwierdź</MudButton>
                </div>
            </MudPaper>
        </MudStack>
    </MudItem>


    <!-- Sekcja grafiki -->
    <MudItem xs="6">
        <MudCard Style="width:100%; position: relative;">
            <MudCardMedia Image="https://img.freepik.com/free-photo/top-view-recipe-book-still-life-concept_23-2149056014.jpg?t=st=1729142774~exp=1729146374~hmac=b03517ce1aadb0443708c36b9ea8e6d86b00a050e689d91cd3858ab0dd68f6c9&w=1060" Height="500" />

        </MudCard>
    </MudItem>
</MudGrid>



@code {
    // Nazwa diety ze strony AllGuestDiets
    [Parameter] public int DietId { get; set; }
    private Dieta selectedDiet;
    
    private string SelectedOption;

    //Metoda nadpisania, która jest wywoływana po zainicjowaniu komponentu.
    //OnInitialized()-Używana jest do wykonania operacji inicjalizacyjnych, takich jak pobieranie danych.
    protected override void OnInitialized()
    {
        //nowa instacja uri, która reprezentuje aktualny URL
        var uri = new Uri(NavigationManager.Uri);
        //System.Web.HttpUtility-analizuje ciąg zapytania części URL po znaku "?" i zwraca kolekcję par klucz-wartość.
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        DietId = int.Parse(query["DietId"] ?? "0");

        
        SelectedOption = query["SelectedOption"];
        if (string.IsNullOrEmpty(SelectedOption))
        {
            SelectedOption = "Nie wybrano żadnej opcji.";
        }
        
    }
    //Wyciąganie z bazy 
    private List<Danie> dania=new List<Danie>();
    private Danie selectedMeal;
   
    // private List<Produkt> produkty=new List<Produkt>();
    // private Produkt selectedProdukt;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // selectedDiet = await Http.GetFromJsonAsync<Dieta>($"api/Diet/{DietId}");
            selectedDiet = await Http.GetFromJsonAsync<Dieta>($"api/Diet/{DietId}");
            if (selectedDiet == null)
            {
                Console.WriteLine($"Dieta o ID {DietId} nie została znaleziona.");
            }
            // produkty = await Http.GetFromJsonAsync<List<Produkt>>("api/Product");
            dania = await Http.GetFromJsonAsync<List<Danie>>("api/Meal");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania danych: {ex.Message}");
        }
    }
    
    //wyswietlanie snackbaru-krótkiej wiadomości o powodzeniu lub nie danej operacji
    private void snackBarFun()
    {
        bool isSuccess = true;
        if (isSuccess)
        {
            Snackbar.Add("Tutaj bedzie informacja o (nie)powodzeniu update na bazie danych",Severity.Success);
        }
        else
        {
            Snackbar.Add("Tutaj bedzie informacja o niepowodzeniu update na bazie danych",Severity.Error);
        }
    }
    

}