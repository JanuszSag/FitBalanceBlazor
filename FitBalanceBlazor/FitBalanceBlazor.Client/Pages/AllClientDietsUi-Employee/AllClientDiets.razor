@page "/allClientDiets"
@using System.ComponentModel.DataAnnotations 
@using FitBalanceBlazor.Models
@inject HttpClient Http


<PageTitle>All clients diets</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>wszystkie diety</strong></MudText>

<!-- Sekcja elementów listy diet -->

<MudGrid>
    <MudItem xs="9">
        <MudTable Items="@diety">
            <RowTemplate>
                <MudPaper Class="pa-3 my-4" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
                    <MudTd Style="text-transform: uppercase" DataLabel="Nazwa"><strong>@context.nazwa</strong></MudTd>
                    <MudStack Justify="Justify.SpaceAround">
                        <MudTd DataLabel="Opis">Opis: @context.opis</MudTd>
                        <MudTd DataLabel="Rodzaj">Rodzaj: @context.rodzaj</MudTd><!-- zmienić na string-->
                        <!-- <MudTd  DataLabel="Dania">@context.dania</MudTd>--><!-- wyciagnac z innej tabeli-->
                    </MudStack>
        
                    <MudStack Row="true" Justify="Justify.SpaceAround">
                        <div class="d-flex align-center">
                            <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-right: 100px " Href="/changeDiet">Zmień</MudButton>
                            <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-left: 100px">Usuń</MudButton><!--JAk to zrobić?-->
                        </div>
                    </MudStack>
                </MudPaper>
            </RowTemplate>
        </MudTable>

            <MudButton Variant="Variant.Filled" Style="width:300px; background:rgb(255,152,107);border-radius: 20px;"
                       Href="/addDiet">Dodaj dietę</MudButton>
    </MudItem>
   
    <!-- Sekcja filtrów-rodzaj diety -->
    <MudItem xs="2">
        <MudStack>
            @* <MudTable Items="@rodzaje"> *@
            @*     <RowTemplate> *@
            @*         <MudPaper Class="pa-3 my-4" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;"> *@
            @*             <MudTd Style="text-transform: uppercase" DataLabel="Nazwa"><strong>@context.nazwa</strong></MudTd> *@
            @*             <MudStack Justify="Justify.SpaceAround"> *@
            @*                 <MudTd DataLabel="Opis">Opis: @context.id_rodzaj</MudTd> *@
            @*                 <MudTd DataLabel="Rodzaj">Rodzaj: @context.nazwa</MudTd><!-- zmienić na string--> *@
            @*                 <!-- <MudTd  DataLabel="Dania">@context.dania</MudTd>--><!-- wyciagnac z innej tabeli--> *@
            @*             </MudStack> *@
            @* *@
            @*             <MudStack Row="true" Justify="Justify.SpaceAround"> *@
            @*                 <div class="d-flex align-center"> *@
            @*                     <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-right: 100px " Href="/changeDiet">Zmień</MudButton> *@
            @*                     <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-left: 100px">Usuń</MudButton><!--JAk to zrobić?--> *@
            @*                 </div> *@
            @*             </MudStack> *@
            @*         </MudPaper> *@
            @*     </RowTemplate> *@
            @* </MudTable> *@
            <MudText Typo=Typo.h6><strong>Filtry</strong></MudText>
            <MudPaper Class="pa-10" Style="border: 4px black;border-radius: 20px;">
                <MudText Typo="Typo.h6">Rodzaj:</MudText>
                @* <MudRadioGroup @bind-Value="modelFilter.SelectedOption"> *@
                @*     <MudStack> *@
                @*         @foreach (var rodzaj in rodzaje) *@
                @*         { *@
                @*             <MudRadio Value="@("rodzajDiety")">@rodzaj.nazwa</MudRadio> *@
                @*         } *@
                @* *@
                @*         <!-- trzeba jakoś używaż rodzaji diet -dynamicznie--> *@
                @*     </MudStack> *@
                @*     $1$ <MudRadio Value="@("wegetariańksaDieta")" Color="Color.Primary">wegetariańksa dieta</MudRadio> #1# *@
                @*     $1$ <MudRadio Value="@("wegańskaDieta")" Color="Color.Primary">wegańska dieta</MudRadio> #1# *@
                @*     $1$ <MudRadio Value="@("ketoDieta")" Color="Color.Primary">keto dieta</MudRadio> #1# *@
                @*     $1$ <MudRadio Value="@("dietaBezLaktozy")" Color="Color.Primary">dieta bez laktozy</MudRadio> #1# *@
                @*     $1$ <MudRadio Value="@("dietaBezGlutenu")" Color="Color.Primary">dieta bez glutenu</MudRadio> #1# *@
                @*     $1$ <MudRadio Value="@("dietaKoszerna")" Color="Color.Primary">dieta koszerna</MudRadio> #1# *@
                @*     $1$ <MudRadio Value="@("eszystkieRodzaje")" Color="Color.Primary">pokaż wszystkie</MudRadio> #1# *@
                @* </MudRadioGroup> *@

                <MudText Color="Color.Error">
                    <ValidationMessage For="@(() => modelFilter.SelectedOption)"Class="text-danger"></ValidationMessage>
                </MudText>

                <div class="d-flex align-center">
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;">
                        Pokaż wyniki<!--i pytanie co dalej-->
                    </MudButton>
                </div>
            </MudPaper>
        </MudStack>
    </MudItem>
</MudGrid>

@* *@
@* <MudTable Items="@diety"> *@
@*     <HeaderContent> *@
@*         <MudTh>Id</MudTh> *@
@*         <MudTh>Nazwa</MudTh> *@
@*         <MudTh>Kaloryczność</MudTh> *@
@*     </HeaderContent> *@
@*     <RowTemplate> *@
@*         <MudTd DataLabel="Id">@context.id_dieta</MudTd> *@
@*         <MudTd DataLabel="Nazwa">@context.nazwa</MudTd> *@
@*         <MudTd DataLabel="Kalorycznosc">@context.kalorycznosc</MudTd> *@
@*     </RowTemplate> *@
@* </MudTable> *@



@code
{
    //Zmienne, które są listami obiektów typu Dieta i Rodzaj, lista przechowuje dane, które pobrane są z API
    private List<Dieta> diety;
    private List<Rodzaj> rodzaje;
    private List<Opinia> opinie;

    //Metoda, która jest wywoływana gdy komponent jest inicjalizowany-tworzony i wstawiany 
    //async-asunchroniczna,co pozwala na wykonywanie operacji wejścia/wyjścia, jak np. pobieranie danych z serwera, bez blokowania głównego wątku aplikacji
    protected override async Task OnInitializedAsync()
    {
        //Http.GetFromJsonAsync<T> metoda pobiera dane z określonego endpointu API i deserializuje je do typu T(Dieta/Rodzaj), odpowiedz w formacie JSON, który może byc przekonwertowany na liste obiektów Dieta/Rodzaj
        diety = await Http.GetFromJsonAsync<List<Dieta>>("api/Diet");
       //rodzaje= await Http.GetFromJsonAsync<List<Rodzaj>>("api/Type");//api/??? jaka nazwa
        ////to chyba nie moze byc w 1 miejscu(w jednej metodzie- rodzaje i diety) 
    }
    
    //Model formularza,Klasa "AllClientDiets" gdzie przechowywane są informację wprowadzone do formularza(filtracja)
    FilterForm modelFilter = new FilterForm();
    bool success;

    public class FilterForm
    {
        //Wymagania formularza required-wymagany
        [Required(ErrorMessage = "Należy wybrać pozycję.")]
        public string SelectedOption { get; set; }

    }

}
