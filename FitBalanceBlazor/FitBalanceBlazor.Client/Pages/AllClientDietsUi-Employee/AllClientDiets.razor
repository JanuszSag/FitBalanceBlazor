@page "/allClientDiets"
@using System.ComponentModel.DataAnnotations 
@using FitBalanceBlazor.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>All clients diets</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>wszystkie diety</strong></MudText>

<!-- Sekcja elementów listy diet -->

<MudGrid>
    <MudItem xs="9">
        <MudTable Items="@diety">
            <RowTemplate>
                <MudPaper Class="pa-3 my-4" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
                    <MudTd Style="text-transform: uppercase" DataLabel="Nazwa"><strong>@context.nazwa</strong></MudTd>
                    <MudStack Justify="Justify.SpaceAround">
                        <MudTd DataLabel="Opis"><MudText Typo="Typo.subtitle1">Opis: @context.opis</MudText></MudTd>
                        <MudTd DataLabel="Rodzaj"><MudText Typo="Typo.subtitle1">Rodzaj: @rodzaje.FirstOrDefault(r => r.id_rodzaj == @context.rodzaj)?.nazwa</MudText></MudTd>
                        @* <MudTd DataLabel="Dania"><MudText Typo="Typo.subtitle1">Dania: @dania.FirstOrDefault(d=>d.Dieta_id_dieta== @context.id_dieta)?.nazwa</MudText></MudTd> *@
                        @* <MudTd DataLabel="Dania"><MudText Typo="Typo.subtitle1">Dania: @dania.FirstOrDefault(d=>d.id_danie== @context.Danie_id_danie)?.nazwa</MudText></MudTd> *@
                    </MudStack>

                    <MudStack Row="true" Justify="Justify.SpaceAround">
                        <div class="d-flex align-center">
                            <MudButton Variant="Variant.Filled" 
                                       Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-right: 100px" 
                                       OnClick="() => onChangeDiet(context.id_dieta)">
                                Zmień
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-left: 100px">
                                Usuń
                            </MudButton>
                        </div>
                    </MudStack>
                </MudPaper>
            </RowTemplate>
        </MudTable>
        

        <MudButton Variant="Variant.Filled" 
                   Style="width:300px; background:rgb(255,152,107);border-radius: 20px;" 
                   Href="/addDiet">
            Dodaj dietę
        </MudButton>
    </MudItem>

    <!-- Sekcja filtrów-rodzaj diety -->
    <MudItem xs="2">
        <MudStack>
            <MudText Typo=Typo.h6><strong>Filtry</strong></MudText>
            <MudPaper Class="pa-10" Style="border: 6px black;border-radius: 20px;">
                <MudText Typo="Typo.h6">Rodzaj:</MudText>
                <MudRadioGroup @bind-Value="modelFilter.SelectedOption">
                    <MudStack>
                        <MudRadio Value="@("wszystkieDiety")">wszystkie rodzaje</MudRadio>
                        @foreach (var rodzaj in @rodzaje)
                        {
                        <MudRadio Value="@("rodzajDiety")">@rodzaj.nazwa</MudRadio>
                        }
                    </MudStack>

                </MudRadioGroup>

                <MudText Color="Color.Error">
                    <ValidationMessage For="@(() => modelFilter.SelectedOption)"Class="text-danger"></ValidationMessage>
                </MudText>

                <div class="d-flex align-center">
                    <MudButton ButtonType="ButtonType.Button"
                               Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;"
                               OnClick="dietsFilter">
                        Pokaż wyniki
                    </MudButton>
                </div>
            </MudPaper>
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    //Zmienne, które są listami obiektów typu Dieta i Rodzaj, lista przechowuje dane, które pobrane są z API
    private List<Dieta> diety=new List<Dieta>();
    private List<Rodzaj> rodzaje=new List<Rodzaj>();
    private List<Danie> dania=new List<Danie>();
    

    protected override async Task OnInitializedAsync()
    {
        //diety = await Http.GetFromJsonAsync<List<Dieta>>("api/Diet");
        rodzaje = await Http.GetFromJsonAsync<List<Rodzaj>>("api/Category");
        dania = await Http.GetFromJsonAsync<List<Danie>>("api/Meal");
  
    }

    // Metoda do przekazywania ID diety do strony zmiany
    private void onChangeDiet(int id) 
    {
        NavigationManager.NavigateTo($"/changeDiet/{id}");
    }
    //Model formularza,Klasa "AllClientDiets" gdzie przechowywane są informację wprowadzone do formularza(filtracja)
    FilterForm modelFilter = new FilterForm();
    bool success;

    public class FilterForm
    {
        public string SelectedOption { get; set; } = "wszytskieDiety";

    }
       //obsługa filtrów
    private async Task dietsFilter()
    {
        if (modelFilter.SelectedOption == "wszystkieDiety")
        {
            diety = await Http.GetFromJsonAsync<List<Dieta>>("api/Diet");
        }
        else
        {
            //żadna nie działa poprawnie
            //diety = diety.Where(d => rodzaje.FirstOrDefault(r => r.id_rodzaj == d.rodzaj)?.nazwa == modelFilter.SelectedOption).ToList();
           // diety = diety.Where(d => rodzaje.Any(r => r.id_rodzaj == d.rodzaj && r.nazwa == modelFilter.SelectedOption)).ToList();
             //diety = diety.Where(d => rodzaje.Any(r => r.id_rodzaj == d.rodzaj && string.Equals(r.nazwa, modelFilter.SelectedOption, StringComparison.OrdinalIgnoreCase))).ToList();
             //diety = diety.Where(d => rodzaje.Any(r => r.id_rodzaj == d.rodzaj)).ToList();
             //diety = diety.Where(d => rodzaje.Any(r => r.id_rodzaj == d.rodzaj)).Where(d => d.rodzaj == modelFilter.SelectedOption) // lub inne warunki.ToList();
             
             // diety = diety.Where(d => {
             //     int selectedId;
             //     bool isInt = int.TryParse(modelFilter.SelectedOption, out selectedId);
             //     return isInt && d.rodzaj == selectedId;
             // }).ToList();
             diety = diety.Where(d => 
                 rodzaje.Any(r => 
                     r.id_rodzaj == d.rodzaj && 
                     string.Equals(r.nazwa, modelFilter.SelectedOption, StringComparison.OrdinalIgnoreCase)
                 )
             ).ToList();

             
        }
        StateHasChanged();
        // Console.WriteLine($"Number of diets after filter: {diety.Count}");
    }
 
    


}
