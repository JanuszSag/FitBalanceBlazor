@page "/allClientDiets"
@using System.ComponentModel.DataAnnotations 
@using FitBalanceBlazor.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>All clients diets</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>wszystkie diety</strong></MudText>


<!-- Sekcja elementów listy diet -->
<MudGrid>
 
    <MudItem xs="9">
        <div align="center">
        <MudButton Variant="Variant.Filled"
                   Style="width:300px; background:rgb(255,152,107);border-radius: 20px;"
                   Href="/addDiet">
            Dodaj dietę
        </MudButton>
        </div>
        @foreach (var dieta in diety)
        {
            <MudPaper Class="pa-3 my-4" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
                <MudText Typo="Typo.h6" Style="text-transform: uppercase;"><strong>@dieta.nazwa</strong></MudText>
                <MudStack>
                    <MudText Typo="Typo.subtitle1">Opis: @dieta.opis</MudText>
                    <MudText Typo="Typo.subtitle1">Rodzaj: @rodzaje.FirstOrDefault(r => r.id_rodzaj == dieta.rodzaj)?.nazwa</MudText>

                    <MudText Typo="Typo.subtitle1" Class="d-inline">Danie:
                        @foreach (var danie in @dieta.Danie_id_danie)
                        {
                            @dieta.Danie_id_danie.FirstOrDefault(d => d.id_danie == danie.id_danie)?.nazwa.ToString().PadRight(60)
                        }
                    </MudText>
                </MudStack>

                <MudStack Row="true" Justify="Justify.SpaceAround">
                    <div class="d-flex align-center">
                        <MudButton Variant="Variant.Filled"
                                   Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-right: 100px"
                                   OnClick="() => onChangeDiet(dieta.id_dieta)">
                            Zmień
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-left: 100px"
                                   OnClick="snackBarFun">Usuń
                        </MudButton>
                    </div>
                </MudStack>
            </MudPaper>

        }

    </MudItem>

    <!-- Sekcja filtrów-rodzaj diety -->
    <MudItem xs="2">
        <MudStack>
            <MudText Typo=Typo.h6><strong>Filtry</strong></MudText>
            <MudPaper Class="pa-10" Style="border: 6px black;border-radius: 20px;">
                <MudText Typo="Typo.h6">Rodzaj:</MudText>
                <MudRadioGroup @bind-Value="modelFilter.SelectedOption">
                    <MudStack>
                        <MudRadio Value="@("wszystkieDiety")">wszystkie rodzaje</MudRadio>
                        @foreach (var rodzaj in @rodzaje)
                        {
                            <MudRadio Value="@rodzaj.nazwa">@rodzaj.nazwa</MudRadio>
                        }
                    </MudStack>

                </MudRadioGroup>
                
                <div class="d-flex align-center">
                    <MudButton ButtonType="ButtonType.Button"
                               Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;"
                               OnClick="dietsFilter">
                        Pokaż wyniki
                    </MudButton>
                </div>
            </MudPaper>
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    
    //Zmienne, które są listami obiektów typu Dieta i Rodzaj, lista przechowuje dane, które pobrane są z API
    private List<Dieta> diety=new List<Dieta>();
    private List<Rodzaj> rodzaje=new List<Rodzaj>();
    private List<Danie> dania=new List<Danie>();
    

    protected override async Task OnInitializedAsync()
    {
        diety = await Http.GetFromJsonAsync<List<Dieta>>("api/Diet");
        rodzaje = await Http.GetFromJsonAsync<List<Rodzaj>>("api/Category");
        dania = await Http.GetFromJsonAsync<List<Danie>>("api/Meal");
  
    }

    // Metoda do przekazywania ID diety do strony zmiany
    private void onChangeDiet(int id) 
    {
        NavigationManager.NavigateTo($"/changeDiet/{id}");
    }
    //Model formularza,Klasa "AllClientDiets" gdzie przechowywane są informację wprowadzone do formularza(filtracja)
    FilterForm modelFilter = new FilterForm();
    bool success;

    public class FilterForm
    {
        public string SelectedOption { get; set; } 

    }
       //obsługa filtrów
       private async Task dietsFilter()
       {
        
           diety = await Http.GetFromJsonAsync<List<Dieta>>("api/Diet");
           if (!modelFilter.SelectedOption.Equals("wszystkieDiety"))
           {
               diety = diety.Where(d => rodzaje.Any(r => r.id_rodzaj == d.rodzaj && r.nazwa == modelFilter.SelectedOption)).ToList();
           }
           StateHasChanged();
       }

    //wyswietlanie snackbaru-krótkiej wiadomości o powodzeniu lub nie danej operacji
    private void snackBarFun()
    {
        bool isSuccess = true;
        if (isSuccess)
        {
            Snackbar.Add("Tutaj bedzie informacja o (nie)powodzeniu update na bazie danych",Severity.Success);
        }
        else
        {
            Snackbar.Add("Tutaj bedzie informacja o niepowodzeniu update na bazie danych",Severity.Error);
        }
    }
}
