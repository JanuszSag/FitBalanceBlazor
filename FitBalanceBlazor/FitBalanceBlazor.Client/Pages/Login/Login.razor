@page "/login"
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using ClassLibrary1
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.IdentityModel.Tokens

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<MudPaper Elevation="2" Class="pa-4" Style="max-width: 400px; margin: auto; background-color: #e4f5ac; border-radius: 20px;">
    <MudForm @ref="form" IsValid="@isValid" OnValidSubmit="HandleValidSubmit">
        <div style="text-align: center;">
            <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Size="Size.Large" Color="Color.Primary" />
        </div>

        <!-- Login -->
        <MudTextField T="string" Label="Login" Variant="Variant.Outlined" Class="mb-3" FullWidth="true" 
                      @bind-Value="login" Validation="isValid"/>

        <!-- Haslo -->
        <MudTextField T="string" Label="Hasło" InputType="InputType.Password" Variant="Variant.Outlined" Class="mb-3" FullWidth="true" 
                      @bind-Value="password" />
        
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" FullWidth="true" Style="background-color: #FF9966; color: black;" OnClick="SignIn">
            Zaloguj
        </MudButton>

    
        <MudText Typo="Typo.caption" Color="Color.Error">@errorMessage</MudText>

        <div class="mt-3" style="text-align: center;">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Nie masz konta? 
                <MudLink Href="/registration">Zarejestruj się</MudLink>
            </MudText>
        </div>
    </MudForm>
</MudPaper>

@code {
    private MudForm form;
    private bool isValid;
    private string errorMessage = string.Empty;

    [Required(ErrorMessage = "Pole login jest wymagane.")]
    [StringLength(20, ErrorMessage = "Login może mieć maksymalnie 20 znaków.")]
    private string login { get; set; } = string.Empty;

    [Required(ErrorMessage = "Pole hasło jest wymagane.")]
    [StringLength(20, MinimumLength = 5, ErrorMessage = "Hasło musi mieć od 5 do 20 znaków.")]
    private string password { get; set; } = string.Empty;


    private void HandleValidSubmit()
    {
        Console.WriteLine("Zalogowano: " + login);
    }


    public async Task SignIn()
    {
        var test = new LoginModel();
        test.login = login;
        test.password = password;
        isValid = true;

        if (login.Length > 40)
        {
            isValid = false;
            Snackbar.Add("Login może mieć maksymalnie 40 znaków.");
        }
        
        if (login.IsNullOrEmpty())
        {
            isValid = false;
            Snackbar.Add("Pole login jest wymagane.");
        }
        
        if (password.Length > 20 || password.Length<3)
        {
            isValid = false;
            Snackbar.Add("Hasło musi mieć od 3 do 20 znaków.");
        }
        
        if (password.IsNullOrEmpty())
        {
            isValid = false;
            Snackbar.Add("Pole hasło jest wymagane.");
        }

        if (!isValid)
            return;
            
        Console.WriteLine(test.login);
        
        var result = await Http.PostAsJsonAsync("api/auth/login", test);

        var content = await result.Content.ReadFromJsonAsync<ServiceResponse<string>>();
        if (content.Data.IsNullOrEmpty())
        {
            Snackbar.Add("Błędny mail lub hasło", Severity.Error);
            return;
        }
        if (content.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsStringAsync("authToken", content.Data??"Error");
            Console.WriteLine(content.Data);
            Console.WriteLine("Test");
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            
            
            NavigationManager.NavigateTo("http://localhost:5131/clientHomePage");
        }
        else
        {
            errorMessage = content.Message;
        }
    }

}