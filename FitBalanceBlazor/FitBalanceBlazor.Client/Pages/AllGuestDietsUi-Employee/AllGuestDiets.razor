@page "/allGuestDiets"
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using FitBalanceBlazor.Models
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>All guest diets</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>Lista diet dla gości</strong></MudText>

<MudTable Items="@diety">
   
    <RowTemplate>
        <MudPaper Class="pa-3 my-4" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
            <MudTd Style="text-transform: uppercase" DataLabel="Nazwa"><strong>@context.nazwa</strong></MudTd>
            <MudStack Justify="Justify.SpaceAround">
            <MudTd DataLabel="Opis" >  <MudText Typo="Typo.subtitle1">Opis: @context.opis </MudText> </MudTd>
            <MudTd DataLabel="Rodzaj"> <MudText Typo="Typo.subtitle1">Rodzaj: @rodzaje.FirstOrDefault(r => r.id_rodzaj == @context.rodzaj)?.nazwa
                </MudText> </MudTd>
            <MudTd DataLabel="Dania">
                <MudText Typo="Typo.subtitle1">Dania:
                    @* @foreach (var idDanie in @context.Danie_id_danie) *@
                    @* { *@
                    @* <span>@dania.FirstOrDefault(d => d.id_danie ==@dieta_danie.nazwa )?.nazwa</span> *@
                    @* } *@
                </MudText>
            </MudTd>
            </MudStack>
            
            <MudStack Row="true" Justify="Justify.SpaceAround">
                <div class="d-flex align-center">
                    <MudButton Variant="Variant.Filled"
                               Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-right: 100px"
                               OnClick="() => onChangeDiet(context.id_dieta)">
                        Zmień
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-left: 100px"
                               OnClick="snackBarFun">Usuń
                    </MudButton>
                    <!--JAk to zrobić?-->
                </div>
            </MudStack>
        </MudPaper>
    </RowTemplate>
</MudTable>

@code {
    private List<Dieta> diety=new List<Dieta>();
    private List<Rodzaj> rodzaje=new List<Rodzaj>();
    private List<Danie> dania=new List<Danie>();

    protected override async Task OnInitializedAsync()
    {
        var wszytskieDiety = await Http.GetFromJsonAsync<List<Dieta>>("api/Diet");
        //Wyswietla tylko pierwsze diety z wszytskich rodzajów - co 6 dlatego Index%6==0 i ogranicza liczbę wyświtlanych diet Take(ograniczenie)
        diety = wszytskieDiety.Where((Item,Index)=>Index%6==0).Take(3).ToList();
        rodzaje= await Http.GetFromJsonAsync<List<Rodzaj>>("api/Category");
        dania= await Http.GetFromJsonAsync<List<Danie>>("api/Meal");
    }
    // Metoda do przekazywania ID diety do strony zmiany
    private void onChangeDiet(int id) 
    {
        NavigationManager.NavigateTo($"/changeDiet/{id}");
    }

    // private void ChangePage(string name)
    // {
    //     NavigationManager.NavigateTo($"/changeDiet?name={name}");
    // }
    
    //wyswietlanie snackbaru-krótkiej wiadomości o powodzeniu lub nie danej operacji
    private void snackBarFun()
    {
        bool isSuccess = true;
        if (isSuccess)
        {
            Snackbar.Add("Tutaj bedzie informacja o (nie)powodzeniu update na bazie danych",Severity.Success);
        }
        else
        {
            Snackbar.Add("Tutaj bedzie informacja o niepowodzeniu update na bazie danych",Severity.Error);
        }
    }
   
}