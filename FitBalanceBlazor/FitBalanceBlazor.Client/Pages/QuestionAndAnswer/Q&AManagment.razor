@page "/Q&AManagment"
@using System.ComponentModel.DataAnnotations
@using System.IdentityModel.Tokens.Jwt
@using Blazored.LocalStorage
@using ClassLibrary1
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage


<AuthorizeView Roles="Employee, Admin">
<Authorized>
<PageTitle>Q&AManagment</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>Zarządzanie sekcją Q&A</strong></MudText>

<!-- Sekcja dodawnaia nowego pytania i odpowiedzi -->

    <MudButton Variant="Variant.Filled"
               Style="width:300px; background:rgb(255,152,107);border-radius: 20px;"
               Href="/addQ&A">
        Dodaj nowy element Q&A
    </MudButton>
       

    <!-- Sekcja wszystkich Q&A w bazie -->
    @foreach (var qa in questionAnswer)
    {
        <MudPaper Class="pa-3 my-4" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
            <MudStack>
                <MudText Typo="Typo.subtitle1">@qa.id @qa.pytanie</MudText>
                <MudText Typo="Typo.subtitle1"> @qa.odpowiedz</MudText>
            </MudStack>
        
            <!-- Sekcja usuwania elementu Q&A-->
            <MudStack Row="true" Justify="Justify.SpaceAround">
                <MudButton Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;margin-left: 100px"
                           OnClick="() => DeleteQA(qa.id)">Usuń
                </MudButton>
               
            </MudStack>
        </MudPaper>

    }
</Authorized>
</AuthorizeView>
    
@code {
    private List<Pytania_i_odpowiedzi> questionAnswer = new List<Pytania_i_odpowiedzi>();
    private Uzytkownik user;
    private JwtSecurityToken jwt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // var TokenText = await LocalStorage.GetItemAsStringAsync("authToken");
            // jwt = new JwtSecurityTokenHandler().ReadJwtToken(TokenText);
            // var claim = jwt.Claims.First(c => c.Type.Equals("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"));
            // var userResponse = await Http.GetFromJsonAsync<ServiceResponse<Uzytkownik>>($"api/user/diet/{claim.Value}"); //zmienić na claim.id
            // user = userResponse.Data;
            
            
            var qaRespone = await Http.GetFromJsonAsync<ServiceResponse<List<Pytania_i_odpowiedzi>>>("api/QuestionAnswer");
            questionAnswer = qaRespone.Data;
        }
        catch (Exception e)
        {
            // NavigationManager.NavigateTo("/login");
        }
    }

    private async void DeleteQA(int id)
    {
        var result = await Http.DeleteAsync($"api/QuestionAnswer/{id}");

        Snackbar.Add("Usunięto element Q&A", Severity.Success);
        
        var qaRespone = await Http.GetFromJsonAsync<ServiceResponse<List<Pytania_i_odpowiedzi>>>("api/QuestionAnswer");
        questionAnswer = qaRespone.Data;

        await InvokeAsync(StateHasChanged);
    }
}



