
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@page "/addDiet"

@using System.ComponentModel.DataAnnotations
@using FitBalanceBlazor.Models
@inject HttpClient Http

<PageTitle>Add diet</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>dodawanie diety</strong></MudText>

@* <EditForm Model="@modelAddDiet" OnValidSubmit="OnValidSubmit"> *@
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="6">
            <MudCard Class="pa-3" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
                <MudCardContent>
                    <!-- Sekcja dodawanie nazwy nowej diety -->
                    @* <MudText Typo="Typo.h6">Nazwa diety</MudText> *@
                    @* <MudTextField @bind-Value="modelAddDiet.DietName" Label="Wpisz nazwę diety" *@
                    @*               For="@(() => modelAddDiet.DietName)" *@
                    @*               Required="true" RequiredError="Należy wprowadzić nazwę" Variant="Variant.Text"></MudTextField> *@
                    <MudText Typo="Typo.h6">Nazwa diety</MudText>
                    <MudTextField @bind-Value="newDiet.nazwa" Label="Należy wprowadzić nazwę" Variant="Variant.Text"></MudTextField>

                    <MudText Typo="Typo.h6">Opis: </MudText>
                    <MudTextField @bind-Value="newDiet.opis" Label="Należy wprowadzić opis" Variant="Variant.Text"></MudTextField>
                    <MudText Typo="Typo.h6">Kaloryczność: </MudText>
                    <MudForm>
                        <MudRadioGroup T="int" @bind-Value="newDiet.kalorycznosc">
                            <MudRadio Value="1200" >1200</MudRadio>
                            <MudRadio Value="1500" >1500</MudRadio>
                            <MudRadio Value="1800" >1800</MudRadio>
                            <MudRadio Value="2000" >2000</MudRadio>
                            <MudRadio Value="2500" >2500</MudRadio>
                            <MudRadio Value="3000" >3000</MudRadio>
                          
                        </MudRadioGroup>
                    </MudForm>

                    <!-- Sekcja wyboru dania do dodania -->
                    <MudText Typo="Typo.h6">Która danie chcesz dodać?</MudText>
                    <MudForm>
                        <MudSelect @bind-Value="selectedDanie" Label="Wybierz danie"> @* AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable*@
                            <MudStack>
                                @foreach (var danie in dania)
                                {
                                <MudSelectItem Value="danie">@danie.nazwa</MudSelectItem>
                                }
                            </MudStack>
                        </MudSelect>
                    </MudForm>
                    @* <div class="d-flex align-center"> *@
                    @*     <MudButton Button OnClick="()=>AddDietD(0,modelAddDiet.DietName,Description,SelectedKcal,1,1)" *@
                    @*                Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;"> *@
                    @*         Zapisz nową diete *@
                    @*     </MudButton> </div> *@
                    <div class="d-flex align-center">
                        <MudButton Button OnClick="AddDietD"
                                   Variant="Variant.Filled" Style="width: 150px;background:rgb(255,152,107);border-radius: 20px;">
                            Zapisz nową diete
                        </MudButton> </div>
                    @* <MudText Color="Color.Error"> *@
                    @*     <ValidationMessage For="@(() => modelAddDiet.SelectedOption)"Class="text-danger"></ValidationMessage> *@
                    @* </MudText> *@
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Sekcja grafiki -->
        <MudItem xs="6">

            <MudCard Style="width:100%; position: relative;">
                <MudCardMedia Image="https://img.freepik.com/foto-gratis/manos-chef-cortando-verduras-su-cocina_155003-42435.jpg" Height="460"/>

            </MudCard>
        </MudItem>
    </MudGrid>
@* </EditForm> *@


@code {
    public string Description { get; set; }
    public string Kcal { get; set; }

//Model formularza,Klasa "AddNewDietForm" gdzie przechowywane są informację wprowadzone do formularza
AddNewDietForm modelAddDiet = new AddNewDietForm();
bool success;

public class AddNewDietForm 
{
//Wymagania formularza required-wymagany
[Required(ErrorMessage = "Należy wprowadzić nazwę diety.")]
[StringLength(20, ErrorMessage = "Nazwa powinna być nie dłuższa niż 20 znaków.")]
public string DietName { get; set; }

}

//Metoda sprawdzająca poprawnośc danych - czy nie są puste
private bool ModelIsValid()
{ 
    return !string.IsNullOrEmpty(modelAddDiet.DietName) ;
}


public int SelectedKcal{ get; set; }

private List<Danie> dania=new List<Danie>();
private Danie selectedDanie { get; set; }

protected override async Task OnInitializedAsync(){ 
    try
{ 
    dania = await Http.GetFromJsonAsync<List<Danie>>("api/Meal");
}
    catch (Exception ex)
{

}
}

//Zapisywanie nowj diety w bazie
    private Dieta newDiet=new();
    private async Task AddDietD()
    {
            var response = await Http.PostAsJsonAsync("api/Diet", newDiet);

    }
    // private async Task AddDietD(int id,string? nazwaD, string? opisD,int kalorycznoscD, int autorD, int rodzajD)
    // {
    //     try
    //     {
    //         var newDiet = new Dieta  {
    //             id_dieta = id,
    //             nazwa = nazwaD,
    //             opis = opisD,
    //             kalorycznosc = kalorycznoscD,
    //             autor = autorD,
    //             rodzaj = rodzajD
    //         };
    //         var response = await Http.PostAsJsonAsync("api/Diet", newDiet);
    //
    //     }
    //     catch (Exception ex)
    //     {
    //         
    //     }
    // }

// //Metoda wywoływana po zatwierdzeniu poprawności formularza, przekazuje parametry do kolejnej strony
// private void OnValidSubmit(EditContext context) //EditContext to klasa w ASP.NET Core Blazor, która jest używana do zarządzania stanem i walidacją formularzy.
// { 
//     if (ModelIsValid())
// { 
//     success = true; 
//     // NavigationManager.NavigateTo($"/addDiet/addIngredientsToNewDiet?DietName={Uri.EscapeDataString(modelAddDiet.DietName)}&SelectedOption={Uri.EscapeDataString(modelAddDiet.SelectedOption)}");
//     NavigationManager.NavigateTo($"/addDiet/addIngredientsToNewDiet?DietName={Uri.EscapeDataString(modelAddDiet.DietName)}");
// }
//     else
// { 
//     success = false;
// }
//     
//     StateHasChanged();
// }
}

