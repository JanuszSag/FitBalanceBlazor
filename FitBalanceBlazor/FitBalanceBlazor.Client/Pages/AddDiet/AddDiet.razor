
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@page "/addDiet"

@using ClassLibrary1
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Add diet</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>dodawanie diety</strong></MudText>

    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="6">
            <MudCard Class="pa-3" Style="width:100%;background:rgb(223,243,156);border-radius: 20px;">
                <MudCardContent>
                <MudText Typo="Typo.h6">Nazwa diety</MudText>
                    <MudTextField @bind-Value="modelAddDiet.DietName" Label="Należy wprowadzić nazwę" Variant="Variant.Text"></MudTextField>
                    
                    <MudText Typo="Typo.h6">Opis: </MudText>
                    <MudTextField @bind-Value="Description" Label="Należy wprowadzić opis" Variant="Variant.Text"></MudTextField>
                    <MudText Typo="Typo.h6">Kaloryczność: </MudText>
                    <MudForm>
                        <MudRadioGroup T="int" @bind-Value="SelectedKcal">
                            <MudRadio Value="1200" >1200</MudRadio>
                            <MudRadio Value="1500" >1500</MudRadio>
                            <MudRadio Value="1800" >1800</MudRadio>
                            <MudRadio Value="2000" >2000</MudRadio>
                            <MudRadio Value="2500" >2500</MudRadio>
                            <MudRadio Value="3000" >3000</MudRadio>
                    
                        </MudRadioGroup>
                    </MudForm>
                    
                    <!-- Sekcja wyboru rodzaju diety -->
                    <MudText Typo="Typo.h6">Rodzaj:</MudText>
                    <MudRadioGroup @bind-Value="modelFilter.SelectedOption">
                        <MudStack>
                            @foreach (var rodzaj in @rodzaje)
                            {
                            <MudRadio Value="@rodzaj.id_rodzaj">@rodzaj.nazwa</MudRadio>
                            }
                        </MudStack>
                    
                    </MudRadioGroup>
                    <!-- Sekcja wyboru dania do dodania -->
                    @* <MudSelect T="Danie" Label="Należy wybrać dania" MultiSelection="true" @bind-Value="SelectedMeals"></MudSelect> *@
                   
                    
                    @* <MudText Typo="Typo.h6">Która danie chcesz dodać?</MudText> *@
                    @*     <MudSelect T="List<Danie>" @bind-Value="SelectedDishes" MultiSelection="true" Clearable="true" Label="Należy wybrać dania"> $1$ AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable#1# *@
                    @*          *@
                    @*             @foreach (var danie in dania) *@
                    @*             { *@
                    @*                 <MudSelectItem Value="dania">@danie.nazwa</MudSelectItem> *@
                    @*             } *@
                    @*         *@
                    @*     </MudSelect> *@


                    @* <MudText Typo="Typo.h6">Która danie chcesz dodać?</MudText> *@
                    @* <MudSelect T="List<Danie>" @bind-Value="SelectedDishes" MultiSelection="true" Clearable="true" Label="Należy wybrać dania"> $1$ AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable#1# *@
                    @*     @foreach (var danie in dania) *@
                    @*     { *@
                    @*     <MudSelectItem Value="@danie.id_danie">@danie.nazwa</MudSelectItem><!--zaznacza sie cala lista albo nic --> *@
                    @*     } *@
                    @*      *@
                    @* </MudSelect> *@
                    @* <MudText Typo="Typo.h6">Która danie chcesz dodać?</MudText> *@
                    @* <MudSelect T="Danie" @bind-Value="SelectedDish"  Label="Należy wybrać danie"> $1$ AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable#1# *@
                    @*     @foreach (var danie in dania) *@
                    @*     { *@
                    @*     <MudSelectItem Value="@dania">@danie.nazwa</MudSelectItem> *@
                    @*     } *@
                    @* *@
                    @* </MudSelect> *@
                    
                    
                    
                    @* <MudText Typo="Typo.h6">Danie 1:</MudText> *@
                    @* <MudSelect @bind-Value="modelFilter.SelectedMeal1" @onselect="OnMealChanged"> *@
                    @*     <MudStack> *@
                    @*         @foreach (var danie in dania) *@
                    @*         { *@
                    @*             <MudSelectItem Value="@danie.id_danie">@danie.nazwa</MudSelectItem> *@
                    @*         } *@
                    @*     </MudStack> *@
                    @* </MudSelect> *@
                    @* <MudText Typo="Typo.h6">Danie 2:</MudText> *@
                    @* <MudSelect @bind-Value="modelFilter.SelectedMeal2" @onselect="OnMealChanged"> *@
                    @*     <MudStack> *@
                    @*         @foreach (var danie in dania) *@
                    @*         { *@
                    @*         <MudSelectItem Value="@danie.id_danie">@danie.nazwa</MudSelectItem> *@
                    @*         } *@
                    @*     </MudStack> *@
                    @* </MudSelect> *@
                    @* <MudText Typo="Typo.h6">Danie 3:</MudText> *@
                    @* <MudSelect @bind-Value="modelFilter.SelectedMeal3" @onselect="OnMealChanged" > *@
                    @*     <MudStack> *@
                    @*         @foreach (var danie in dania) *@
                    @*         { *@
                    @*             <MudSelectItem Value="@danie.id_danie">@danie.nazwa</MudSelectItem> *@
                    @*         } *@
                    @*     </MudStack> *@
                    @* </MudSelect> *@
                    <MudStack>
                            <MudText Typo="Typo.h6">Która danie chcesz dodać? </MudText>
                           <MudText Typo="Typo.subtitle1" Color="Color.Warning">Pamiętaj aby nacisnąć przycisk "Dodaj danie do diety" aby poprawnie dodać danie do diety</MudText> 
                            <MudSelect T="int" @bind-Value="selectedMeal" Label="Wybierz dania"  Variant="Variant.Filled">
                                @foreach (var danie in dania)
                                {
                                    <MudSelectItem Value="@danie.id_danie">@danie.nazwa</MudSelectItem>
                                }
                            </MudSelect>
                            <!--Przycisk dodania ndań do diety-->
                            <MudButton OnClick="AddMeal" Variant="Variant.Filled" Style="width: 300px;background:rgb(255,152,107);border-radius: 20px;">Dodaj danie do diety</MudButton>

                            <MudText Typo="Typo.h6">Wybrane dania do diety(id_dania): @string.Join(", ", listOfMealsId)</MudText>
                     
                    
                    <!--Przycisk dodania nowej diety-->
                    <div class="d-flex align-center">
                            <MudButton Button OnClick="()=>AddDietD(0,modelAddDiet.DietName,Description,SelectedKcal,1,modelFilter.SelectedOption)"
                                       Variant="Variant.Filled" Style="width: 300px;background:rgb(255,152,107);border-radius: 20px;" >
                                Zapisz nową diete
                            </MudButton> </div>
                    </MudStack>

                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Sekcja grafiki -->
        <MudItem xs="6">

            <MudCard Style="width:100%; position: relative;">
                <MudCardMedia Image="https://img.freepik.com/foto-gratis/manos-chef-cortando-verduras-su-cocina_155003-42435.jpg" Height="460"/>

            </MudCard>
        </MudItem>
    </MudGrid>
@* </EditForm> *@


@code {
//Model formularza,Klasa "AddNewDietForm" gdzie przechowywane są informację wprowadzone do formularza
AddNewDietForm modelAddDiet = new AddNewDietForm();
bool success;

public class AddNewDietForm 
{
//Wymagania formularza required-wymagany
[Required(ErrorMessage = "Należy wprowadzić nazwę diety.")]
[StringLength(20, ErrorMessage = "Nazwa powinna być nie dłuższa niż 20 znaków.")]
public string DietName { get; set; }

}

public string Description { get; set; }
public int SelectedKcal{ get; set; }
// public List<Danie> SelectedDishes { get; set; } = new List<Danie>();
public List<Danie> SelectedDishes { get; set; } = new List<Danie>();
public Danie SelectedDish { get; set; } 

private List<Rodzaj> rodzaje=new List<Rodzaj>();
private List<Danie> dania=new List<Danie>();

// private Danie selectedDanie { get; set; }

FilterForm modelFilter = new FilterForm();
public class FilterForm
{
    public int SelectedOption { get; set; }
    

}
// Aktualnie wybrany posiłek
private int selectedMeal; 
// Lista wszystkich wybranych posiłków
private List<int> listOfMealsId = new(); 

private void AddMeal()
{
    if (!listOfMealsId.Contains(selectedMeal) && selectedMeal > 0)
    {
        listOfMealsId.Add(selectedMeal);
        Snackbar.Add($"Dodano danie: {selectedMeal}", Severity.Success);
    }
}


protected override async Task OnInitializedAsync(){ 
    try
{ 
    rodzaje = await Http.GetFromJsonAsync<List<Rodzaj>>("api/Category");
    dania = await Http.GetFromJsonAsync<List<Danie>>("api/Meal");
}
    catch (Exception ex)
{

}
}

//Zapisywanie nowj diety w bazie
    private DietaDTO newDiet;

    private async Task AddDietD(int id,string? nazwaD, string? opisD,int kalorycznoscD, int autorD, int rodzajD)
    {
        try
        {
            newDiet = new DietaDTO(id, nazwaD, opisD, kalorycznoscD, autorD, rodzajD);
            var response = await Http.PostAsJsonAsync("api/Diet", newDiet);
            //wyswietlanie snackbaru-krótkiej wiadomości o powodzeniu lub nie danej operacji
            Snackbar.Add("Dodano nową dietę do bazy danych",Severity.Success);
    
        }
        catch (Exception ex)
        {
            Snackbar.Add("Nie udało się dodać nowej diety do bazy danych",Severity.Error);
        }
    }

    // //Metoda sprawdzająca poprawnośc danych - czy nie są puste
// private bool ModelIsValid()
// { 
//     return !string.IsNullOrEmpty(modelAddDiet.DietName) ;
// }

    // private async Task AddDietD()
    // {
    //     var response = await Http.PostAsJsonAsync("api/diety", newDiet); 
    //
    //     if (response.IsSuccessStatusCode)
    //     {
    //         //wyswietlanie snackbaru-krótkiej wiadomości o powodzeniu lub nie danej operacji
    //         Snackbar.Add("Tutaj bedzie informacja o (nie)powodzeniu dodania nowej diety do bazy danych",Severity.Success);
    //
    //     }
    //     else
    //     {
    //         Snackbar.Add("Tutaj bedzie informacja o niepowodzeniu u dodania nowej diety do bazy danych",Severity.Error);
    //     }
    //     }

// //Metoda wywoływana po zatwierdzeniu poprawności formularza, przekazuje parametry do kolejnej strony
// private void OnValidSubmit(EditContext context) //EditContext to klasa w ASP.NET Core Blazor, która jest używana do zarządzania stanem i walidacją formularzy.
// { 
//     if (ModelIsValid())
// { 
//     success = true; 
//     // NavigationManager.NavigateTo($"/addDiet/addIngredientsToNewDiet?DietName={Uri.EscapeDataString(modelAddDiet.DietName)}&SelectedOption={Uri.EscapeDataString(modelAddDiet.SelectedOption)}");
//     NavigationManager.NavigateTo($"/addDiet/addIngredientsToNewDiet?DietName={Uri.EscapeDataString(modelAddDiet.DietName)}");
// }
//     else
// { 
//     success = false;
// }
//     
//     StateHasChanged();
// }
}

