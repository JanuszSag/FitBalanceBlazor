@page "/informationAboutPersonalData/decisionWhatPersonalDataChange/{UserId:int}"
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http


<PageTitle>Decision What Personal Data Change</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h1" Style="text-transform: uppercase;"><strong>Zmiana danych osobowych</strong></MudText>

<MudGrid>
    <MudItem xs="6">
        <MudCard Class="pa-3" Style="width:100%;background:rgb(223,243,156);border-radius: 20px; height: auto;">
            <MudCardContent>
                <!-- Sekcja opis -->
                <MudStack Spacing="5">
                    <MudText Align="Align.Left" Typo="Typo.h4"><strong>Edytuj dane </strong></MudText>
                    <MudText Align="Align.Left" Typo="Typo.h4">trzeba zrobic endpoint dla uzytkownika </MudText>
                    <MudTextField T="string" @bind-Value="@Nickname" Label="Pseudonim "/>
                    <MudTextField T="string" @bind-Value="@Email" Label="Adres email"/>
                    <MudDatePicker @bind-Date="@BirthDate" Label="Data urodzenia" MaxDate="DateTime.Today"/>
                    <MudSelect Label="Płeć" @bind-Value="Gender" Variant="Variant.Outlined" Class="mb-3">
                        <MudSelectItem Value=@("Mężczyzna")>Mężczyzna</MudSelectItem>
                        <MudSelectItem Value=@("Kobieta")>Kobieta</MudSelectItem>
                        <MudSelectItem Value=@("Inne")>Inne</MudSelectItem>
                    </MudSelect>
                    <MudNumericField T="int" @bind-value="@Height" Label="Wzrost" Min="50" Max="250"/>
                    <MudNumericField T="int" @bind-value="@Weight" Label="Waga" Min="10" Max="300"/>
                </MudStack>
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled" Style="width: auto;background:rgb(255,152,107);border-radius: 20px;"
                           OnClick="Submit">
                    Zatwierdź
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Sekcja grafiki -->
    <MudItem xs="6">
        <MudCard Style="width:100%; position: relative;">
            <MudImage Fluid="true" Src="/Images/PersonalData/DataImage.png" Alt="Image" Class="rounded-lg"/>
        </MudCard>
    </MudItem>
</MudGrid>
@code {
    

    [Parameter] public int UserId { get; set; }
    
    [Required(ErrorMessage = "Pole Pseudonim jest wymagane.")]
    [StringLength(20, ErrorMessage = "Login może mieć maksymalnie 20 znaków.")]
    public string Nickname { get; set; } = string.Empty;

    [Required(ErrorMessage = "Pole e-mail jest wymagane.")]
    [EmailAddress(ErrorMessage = "Nieprawidłowy format e-mail.")]
    public string Email { get; set; } = string.Empty;

    [Required(ErrorMessage = "Data urodzenia jest wymagana.")]
    [DataType(DataType.DateTime)]
    public DateTime? BirthDate { get; set; }

    [Required(ErrorMessage = "Pole płeć jest wymagane.")]
    public string Gender { get; set; } = string.Empty;

    [Range(50, 250, ErrorMessage = "Wzrost musi być między 50 a 250 cm.")]
    public int Height { get; set; }

    [Range(10, 300, ErrorMessage = "Waga musi być między 10 a 300 kg.")]
    public int Weight { get; set; }



// Metoda sprawdzająca poprawność danych - czy nie są puste
    private bool ModelIsValid()
    {
        if ((Height >= 50 && Height <= 250) ||
            (Weight >= 10 && Weight <= 300) ||
            Nickname.Length > 20 ||
            !BirthDate.HasValue
        )

    {
            return false;
        }

        return true;
    }

// Metoda wywoływana po zatwierdzeniu poprawności formularza, przekazuje parametry do kolejnej strony
    private void OnValidSubmit(EditContext context) // EditContext to klasa w ASP.NET Core Blazor, która jest używana do zarządzania stanem i walidacją formularzy.
    {

// NavigationManager.NavigateTo($"/changeDiet/changeIngredientsInDiet?SelectedOption={Uri.EscapeDataString(modelChangeDiet.SelectedOption)}");

        StateHasChanged();
    }
    //Obsługa endpointów
    private List<Uzytkownik> uzytkownicy=new List<Uzytkownik>();
    
    protected override async Task OnInitializedAsync()
    { 
        try
        { 
            // uzytkownicy = await Http.GetFromJsonAsync<List<Uzytkownik>("api/");//dodac api
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas pobierania danych: {ex.Message}");
        }
    }

    private async void Submit()
    {
        
            var user = new Uzytkownik()
            {
                id_uzytkownik = UserId,
                pseudonim = Nickname,
                email = Email,
                data_urodzenia = DateOnly.FromDateTime((DateTime)BirthDate!),
                plec = Gender,
                wzrost = Height,
                waga = Weight
            };
            await Http.PutAsJsonAsync("Api/user/", user);
        
            NavigationManager.NavigateTo("/informationAboutPersonalData");
    }

}
